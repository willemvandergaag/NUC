digraph "classes" {
charset="utf-8"
rankdir=BT
"0" [label="{Config|__config : dict\l|__init__(file)\l__openFileToJSON(file)\lgetAverageHeatmapTemp()\lgetClosingTime()\lgetHistorianFilePrefix()\lgetHistorianFolder()\lgetHistorianHeaders()\lgetImage(image)\lgetMaxDifference()\lgetMqttIp()\lgetMqttPort()\lgetMqttTopic()\lgetNumberOfSensors()\lgetOpeningTime()\lgetRoomX()\lgetRoomY()\lgetSensorLocations()\lgetSensorOffsets(sensorId)\lgetSensorXOffset()\lgetSensorYOffset()\lgetSocialDistancing()\lgetTempLimit()\lgetXMultiplier()\lgetYMultiplier()\l}", shape="record"];
"1" [label="{Coordinates|__maxDifference\l|__checkOverlap(allXY)\l__getXYFromSensor(sensor)\l__init__(maxDifference)\lobjectListToSeperateList(objectList)\lremoveDuplicates(sensorList)\l}", shape="record"];
"2" [label="{Heatmap|__averageHeatmapTemp\l__roomX\l__roomY\l__xMultiplier\l__yMultiplier\l|__createEmptyMap()\l__createImageCV(heatmapArray)\l__init__(averageHeatmapTemp, roomX, roomY, xMultiplier, yMultiplier)\l__modifyHeatmap(heatmapArray, seperateLists)\lcreateHeatmap(seperateLists)\l}", shape="record"];
"3" [label="{Historian|__current_date : NoneType, str\l__field_names\l__historianFilePrefix\l__historianFolder\l__path\l|__constructFilePath(folder, file_prefix)\l__getCurrentDateAsString()\l__init__(historianFolder, historianFilePrefix, headerFields)\l__writeHeader()\lwriteCoordinatesToFile(sensorId, x, y)\l}", shape="record"];
"4" [label="{Plot|__afterhoursWarning\l__ax\l__backgroundImage\l__cachedBackground\l__figure\l__getClosingTime\l__getOpeningTime\l__getSocialDistancing\l__humanDistances : list\l__humanLocations : list\l__image\l__roomX\l__roomY\l__sensorLocations\l__tempLimit\l|__calculateDistances(allCoordinates)\l__checkAfterhours()\l__combineSensorLocations()\l__compareTempAlerts(allTemps)\l__createLegend()\l__createPlotFromBackgroundImage(backgroundImage)\l__createTempAlertList(sensorList)\l__createText()\l__drawTempAlerts(sensorList)\l__getTempAlerts(sensor)\l__init__(roomX, roomY, sensorLocations, image, tempLimit, getOpeningTime, getClosingTime, getSocialDistancing)\l__loadBackgroundImage()\l__measureDistancesHumans(seperateList)\l__mergeCoordinatesToArray(seperateList)\l__plotHumans(seperateList)\l__plotSensorLocations(sensorLocations)\l__plotTempAlerts(tempWarningLocations)\l__preparePlot()\l__writeHumanLocations(seperateList)\ldraw(seperateList, sensorList)\l}", shape="record"];
"5" [label="{Sensor|__heatmaps : list\l__humans : int\l__id : int\l__offsetX : int\l__offsetY : int\l__sensorLocations\l__tempAlert : int\l__x : list\l__xMultiplier\l__y : list\l__yMultiplier\l|__getLocationBySensorId()\l__init__(xMultiplier, yMultiplier, sensorLocations)\lappendToX(data)\lappendToY(data)\lconvertXPixelToCentimeters(pixelX)\lconvertYPixelToCentimeters(pixelY)\lgetHeatmaps()\lgetHumans()\lgetId()\lgetOffsetX()\lgetOffsetY()\lgetTempAlert()\lgetX()\lgetY()\lsetHeatmaps(data)\lsetHumans(humans)\lsetId(id)\lsetOffsetX(offset)\lsetOffsetY(offset)\lsetTempAlert(data)\l}", shape="record"];
"6" [label="{SensorList|__data\l__sensorLocations\l__sensorXOffset\l__sensorYOffset\l__sensors : dict\l__xMultiplier\l__yMultiplier\l|__appendToSensors(sensor)\l__getClusters()\l__getHeatmaps()\l__getHumans()\l__getId()\l__getSensorFromMessage()\l__getTempAlert()\l__init__(sensorXOffset, sensorYOffset, xMultiplier, yMultiplier, sensorLocations)\l__populateX(sensor)\l__populateY(sensor)\laddSensorFromMessage(message)\lgetSensors()\l}", shape="record"];
}
